@using NetAF.Commands

<div>
    @if (selectedCommand != null)
    {
        <span style="font-size: 11px;">@(selectedCommand.Command): </span>
    }

    @foreach (var button in buttons)
    {
        <button class="@button.CssClass" style="@button.Style" @onclick="button.OnClick">@button.Text</button>
    }
</div>

@code {
    private const string BaseButtonStyle = "font-size: 11px; margin: 2px;";
    private const string ButtonCssClass = "btn btn-primary";
    private List<ButtonTemplate> buttons = new List<ButtonTemplate>();
    private HtmlAdapter? htmlAdapter;
    private CommandHelp? selectedCommand;
    private CommandHelp[] commands = [];
    public Dictionary<CommandCategory, string> CommandCategoryColors = new Dictionary<CommandCategory, string>()
    {
        { CommandCategory.Frame, "crimson" },
        { CommandCategory.Scene, "seagreen" },
        { CommandCategory.Movement, "navy" },
        { CommandCategory.Custom, "seagreen" },
        { CommandCategory.Conversation, "seagreen" },
        { CommandCategory.Uncategorized, "seagreen" },
        { CommandCategory.Global, "crimson" },
        { CommandCategory.RegionMap, "navy" },
        { CommandCategory.Information, "crimson" }
    };
    public string CommandButtonStyle { get; set; } = BaseButtonStyle;
    public string CancelButtonStyle { get; set; } = BaseButtonStyle + " background: red;";
    public string PromptButtonStyle { get; set; } = BaseButtonStyle + " background: darkorchid;";
    private record ButtonTemplate(string Text, string CssClass, string Style, EventCallback OnClick);

    public void Clear()
    {
        buttons.Clear();
    }

    public async void Update(CommandHelp[] commands)
    {
        selectedCommand = null;
        this.commands = commands.OrderBy(x => x.Command).ToArray();

        Clear();

        foreach (var command in commands.Where(x => CommandCategoryColors.ContainsKey(x.Category)))
            buttons.Add(new ButtonTemplate(command.Command, ButtonCssClass, CommandButtonStyle + $" background: {CommandCategoryColors[command.Category]};", EventCallback.Factory.Create(this, () => CommandButtonClicked(command))));

        await InvokeAsync(StateHasChanged);
    }

    public async void Update(Prompt[] prompts)
    {
        buttons.Clear();

        foreach (var prompt in prompts)
            buttons.Add(new ButtonTemplate(prompt.Entry, ButtonCssClass, PromptButtonStyle, EventCallback.Factory.Create(this, () => PromptButtonClicked(prompt.Entry))));

        buttons.Add(new ButtonTemplate("Clear", ButtonCssClass, CancelButtonStyle, EventCallback.Factory.Create(this, () => ClearButtonClicked())));
        await InvokeAsync(StateHasChanged);
    }

    private void CommandButtonClicked(CommandHelp commandHelp)
    {
        var prompts = htmlAdapter?.Game?.GetPromptsForCommand(commandHelp);

        if (prompts?.Any() ?? false)
        {
            selectedCommand = commandHelp;
            Update(prompts);
        }
        else
        {
            GameExecutor.Update(commandHelp.Command);
        }
    }

    private void PromptButtonClicked(string prompt)
    {
        GameExecutor.Update($"{(selectedCommand?.Command ?? string.Empty)} {prompt}");
        selectedCommand = null;
    }

    private void ClearButtonClicked()
    {
        selectedCommand = null;
        Update(commands);
    }

    public void SetAdapter(HtmlAdapter adapter)
    {
        htmlAdapter = adapter;
    }
}
