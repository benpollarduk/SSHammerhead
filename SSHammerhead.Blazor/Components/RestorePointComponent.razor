@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using NetAF.Logic.Modes
@using NetAF.Persistence
@using NetAF.Persistence.Json
@using SSHammerhead.Assets.Players.Management
@inject IJSRuntime JSRuntime

<div style="display: flex; align-items: center; @(!show ? "display: none;" : "")">
    <span class="span-primary" style="margin-right: 10px; margin-top: 10px;">Restore point:</span>
    <button class="btn btn-primary" style="margin-right: 10px; margin-top: 10px;" @onclick="DownloadRestorePoint">Create</button>
    <InputFile class="inputfile-primary" style="margin-right: 10px; margin-top: 10px;" OnChange="@UploadRestorePoint" />
</div>

@code {
    private bool show = false;
    private HtmlAdapter? htmlAdapter;

    private async void DownloadRestorePoint()
    {
        if (htmlAdapter?.Game == null)
            return;

        var name = $"restore-{(htmlAdapter.Game?.Overworld?.CurrentRegion?.CurrentRoom?.Identifier.Name ?? "start")}".ToLower().Replace(' ', '-');
        var restorePoint = RestorePoint.Create(name, htmlAdapter.Game);
        var serialisation = JsonSave.ToJson(restorePoint);
        await JSRuntime.InvokeVoidAsync("saveAsFile", $"{name}.json", serialisation);
    }

    private async Task UploadRestorePoint(InputFileChangeEventArgs e)
    {
        try
        {
            var game = htmlAdapter?.Game;

            if (game == null)
                return;

            var file = e.File;
            MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(ms);
            var bytes = ms.ToArray();
            var json = System.Text.Encoding.UTF8.GetString(bytes);
            var restorePoint = JsonSave.FromJson(json);
            game.RestoreFrom(restorePoint.Game);
            PlayableCharacterManager.ApplyConfiguration(game.Player, game);
            GameExecutor.Update();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showMessageBox", $"Exception caught uploading restore point: {ex.Message}");
        }
    }

    public async void Update()
    {
        show = htmlAdapter?.Game?.Mode?.Type == GameModeType.Interactive;
        await InvokeAsync(StateHasChanged);
    }

    public void SetAdapter(HtmlAdapter adapter)
    {
        htmlAdapter = adapter;
    }
}

<script>
    window.saveAsFile = (filename, json) => {
        const link = document.createElement('a');
        link.href = `data:application/json,${json}`;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    window.showMessageBox = (message) => {
        alert(message);
    };
</script>
