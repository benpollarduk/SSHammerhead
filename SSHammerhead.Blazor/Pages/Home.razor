@page "/"
@using NetAF.Logic.Configuration
@using NetAF.Logic.Modes
@using NetAF.Rendering.FrameBuilders
@implements IFramePresenter

<PageTitle>Trouble Aboard the SS Hammerhead</PageTitle>

<div>
    @((MarkupString)frameAsHtml)
</div>

<br />

@if (showInput)
{
    <div class="container-stretch">
        <input class="input-stretch" type="text" @ref="textInput" @bind="text" @onkeyup="HandleInput" />
    </div>
}

@if (showAcknowledge)
{
    <div class="container-stretch">
        <button class="btn btn-primary btn-stretch" @ref="acknowledgeButton" @onclick="Acknowledge">OK</button>
    </div>
}

<style>
    .container-stretch {
        display: flex;
    }

    .btn-stretch {
        width: 100%;
    }

    .input-stretch {
        width: 100%;
    }
</style>

@code {
    private HtmlAdapter? htmlAdapter;
    private string frameAsHtml = string.Empty;
    private string text = string.Empty;
    private bool showInput = false;
    private bool showAcknowledge = false;
    private ElementReference acknowledgeButton;
    private ElementReference textInput;

    private void Acknowledge()
    {
        htmlAdapter?.AcknowledgeReceived();
        GameExecutor.Update();
    }

    private void HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(text))
        {
            htmlAdapter?.InputReceived(text);
            GameExecutor.Update(text);

            text = string.Empty;
        }
    }

    protected override void OnInitialized()
    {
        if (GameExecutor.IsExecuting)
            return;

        htmlAdapter = new ConsoleToHtmlAdapter(this);
        GameConfiguration configuration = new(htmlAdapter, SSHammerhead.Blazor.FrameBuilderCollections.Naomi, new(80, 40));
        GameExecutor.Execute(TroubleAboardTheSSHammerHead.Create(configuration, SSHammerhead.Blazor.FrameBuilderCollections.Naomi, SSHammerhead.Blazor.FrameBuilderCollections.Bot), GameExecutionMode.Manual);
    }

    public async void Present(string frame)
    {
        frameAsHtml = frame;
        showInput = htmlAdapter?.Game?.Mode?.Type == GameModeType.Interactive;
        showAcknowledge = htmlAdapter?.Game?.Mode?.Type == GameModeType.Information;

        await InvokeAsync(StateHasChanged);

        if (showInput && textInput.Context != null)
            await textInput.FocusAsync();

        if (showAcknowledge && acknowledgeButton.Context != null)
            await acknowledgeButton.FocusAsync();
    }
}