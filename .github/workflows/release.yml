name: release

on:
  workflow_dispatch:
    inputs:
      ver:
        description: 'The version number, should be specified as a semantic version e.g: X.Y.Z'
        required: true
      release-notes:
        description: 'The versions release notes'
        required: true

permissions:
  contents: read

env:
  DOTNET_VERSION: '8.0'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
         repository: benpollarduk/ss-hammerhead
         token: ${{ secrets.PAT }}
         fetch-depth: 0

    - name: Setup environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release

    - name: Run tests with coverlet
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

    - name: Update version in installer script
      run: |
        cd "${{ github.workspace }}"
        $filePath = ".inno/setup.iss"
        $newVersion = "${{ github.event.inputs.ver }}"
        $content = Get-Content $filePath
        $content -replace '#define ApplicationVersion "1.0.0"', "#define ApplicationVersion `"$newVersion`"" | Set-Content -Path $filePath
      shell: pwsh

    - name: Compile .iss to .exe installer
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: .inno/setup.iss

    - name: Upload installer as artifact
      uses: actions/upload-artifact@v4
      with:
        name: "SSHammerhead_${{ github.event.inputs.ver }}_Setup"
        path: .inno/output/*.exe

    - name: Update version in Blazor app
      run: |
        cd "${{ github.workspace }}"
        $filePath = "SSHammerhead.Blazor/SSHammerhead.Blazor.csproj"
        $newVersion = "${{ github.event.inputs.ver }}"
        $content = Get-Content $filePath
        $content -replace '<Version>0.0.0</Version>', "<Version>${newVersion}</Version>" | Set-Content -Path $filePath
      shell: pwsh

    - name: Publish Blazor app
      run: |
        cd SSHammerhead.Blazor
        dotnet publish -c Release -o dist
      shell: bash

    - name: Create temporary directory for Blazor app
      run: mkdir "${{ runner.temp }}\blazor"

    - name: Checkout existing Blazor app
      run: |
        cd "${{ runner.temp }}\blazor"
        git init
        git remote add origin https://${{ secrets.PAT }}@github.com/benpollarduk/SSHammerhead.git
        git fetch origin blazor-publish
        git checkout blazor-publish

    - name: Delete existing Blazor files and directories
      run: |
        $directory = "${{ runner.temp }}\blazor"
        Get-ChildItem -Path $directory -Force -Recurse | Where-Object {
            $_.FullName -notmatch "\\\.git($|\\)"
        } | Remove-Item -Force -Recurse
      shell: pwsh

    - name: Copy Blazor files
      run: |
        cd "${{ runner.temp }}\blazor"
        cp -r ${{ github.workspace }}\SSHammerhead.Blazor\dist\wwwroot\* . -Force

    - name: Update the base in index.html
      run: |
        cd "${{ runner.temp }}\blazor"
        $filePath = "index.html"
        (Get-Content $filePath) -replace '<base href="" />', '<base href="/SSHammerhead/" />' | Set-Content -Path $filePath
      shell: pwsh

    - name: Commit and push changes to blazor-publish
      run: |
        cd "${{ runner.temp }}\blazor"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update app"
        git push https://${{ secrets.PAT }}@github.com/benpollarduk/SSHammerhead.git HEAD:blazor-publish
      
    - name: Update docfx
      run: dotnet tool update -g docfx

    - name: Update links in download page of documentation site
      run: |
        $filePath = "${{ github.workspace }}\docs\docfx\docs\download.md"
        $version = "${{ github.event.inputs.ver }}"
        $date = Get-Date -Format "MM/dd/yyyy"
        $windowsLink = "[SSHammerhead_${{ github.event.inputs.ver }}_Setup.exe](https://benpollarduk.github.io/SSHammerhead-docs/installer/SSHammerhead_${{ github.event.inputs.ver }}_Setup.exe)"
        $releaseNotes = "${{ github.event.inputs.release-notes }}"
        Add-Content -Path $filePath -Value "**Version:** $version`n"
        Add-Content -Path $filePath -Value "**Date:** $date`n"
        Add-Content -Path $filePath -Value "**Download:** $windowsLink`n"
        Add-Content -Path $filePath -Value "**Release Notes:** $releaseNotes"
      shell: pwsh

    - name: Build documentation
      run: docfx docs/docfx/docfx.json

    - name: Create temporary directory for website
      run: mkdir "${{ runner.temp }}\website"

    - name: Checkout existing website
      run: |
        cd "${{ runner.temp }}\website"
        git init
        git remote add origin https://${{ secrets.PAT }}@github.com/benpollarduk/SSHammerhead-docs.git
        git fetch origin main
        git checkout main

    - name: Delete existing website files and directories
      run: |
        $directory = "${{ runner.temp }}\website"
        Get-ChildItem -Path $directory -Force -Recurse | Where-Object {
            $_.FullName -notmatch "\\\.git($|\\)"
        } | Remove-Item -Force -Recurse
      shell: pwsh

    - name: Copy website files
      run: |
        cd "${{ runner.temp }}\website"
        cp -r ${{ github.workspace }}\docs\docfx\_site\* . -Force

    - name: Create installer directory
      run: |
        mkdir -p "${{ runner.temp }}\website\installer"

    - name: Copy installer file to website's installer directory
      run: |
        $source = "${{ github.workspace }}\.inno\output\SSHammerhead_${{ github.event.inputs.ver }}_Setup.exe"
        $destination = "${{ runner.temp }}\website\installer\SSHammerhead_${{ github.event.inputs.ver }}_Setup.exe"
        Copy-Item -Path $source -Destination $destination -Force
      shell: pwsh

    - name: Commit and push changes to SSHammerhead-docs
      run: |
        cd "${{ runner.temp }}\website"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update documentation"
        git push https://${{ secrets.PAT }}@github.com/benpollarduk/SSHammerhead-docs.git HEAD:main

    - name: Tag the commit
      run: |
        cd ${{ github.workspace }}
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ inputs.ver }}" -m "${{ inputs.ver }} tagged during GitHub action"
        git push --tags

    - name: Create GitHub release
      uses: actions/create-release@v1
      with:
        tag_name: "${{ inputs.ver }}"
        release_name: "${{ inputs.ver }}"
        body: "${{ inputs.release-notes }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
