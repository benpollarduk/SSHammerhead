name: release

on:
  workflow_dispatch:
    inputs:
      ver:
        description: 'The version number, should be specified as a semantic version e.g: X.Y.Z'
        required: true
      release-notes:
        description: 'The versions release notes'
        required: true

permissions:
  contents: read

env:
  DOTNET_VERSION: '8.0'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
         repository: benpollarduk/ss-hammerhead
         token: ${{ secrets.PAT }}
         fetch-depth: 0

    - name: Setup environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release

    - name: Run tests with coverlet
      run: dotnet test /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

    - name: Update version in installer script
      run: |
        cd "${{ github.workspace }}"
        $filePath = ".inno/setup.iss"
        $newVersion = "${{ github.event.inputs.ver }}"
        $content = Get-Content $filePath
        $content -replace '#define ApplicationVersion "1.0.0"', "#define ApplicationVersion `"$newVersion`"" | Set-Content -Path $filePath
      shell: pwsh

    - name: Compile .iss to .exe installer
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: .inno/setup.iss

    - name: Upload installer as artifact
      uses: actions/upload-artifact@v3
      with:
        name: "SSHammerhead_${{ github.event.inputs.ver }}_Setup"
        path: .inno/output/*.exe

    - name: Create directory for website
      run: |
        mkdir ${{ github.workspace }}\SSHammerhead-docs

    - name: Update docfx
      run: dotnet tool update -g docfx

    - name: Build documentation
      run: docfx docs/docfx/docfx.json

    - name: Copy website files
      run: |
        cd SSHammerhead-docs
        git init
        git remote add origin https://${{ secrets.PAT }}@github.com/benpollarduk/SSHammerhead-docs.git
        git fetch origin main
        git reset --hard origin/main
        git checkout main
        git rm -r --ignore-unmatch .
        cp -r ${{ github.workspace }}\docs\docfx\_site\* .

    - name: Create installer directory
      run: |
        mkdir ${{ github.workspace }}\SSHammerhead-docs\installer

    - name: Copy installer file to websites installer directory
      run: |
        $source = "${{ github.workspace }}\.inno\output\SSHammerhead_${{ github.event.inputs.ver }}_Setup.exe"
        $destination = "${{ github.workspace }}\SSHammerhead-docs\installer\SSHammerhead_Setup.exe"
        Copy-Item -Path $source -Destination $destination -Force
        $destination = "${{ github.workspace }}\SSHammerhead-docs\installer\SSHammerhead_${{ github.event.inputs.ver }}_Setup.exe"
        Copy-Item -Path $source -Destination $destination -Force
      shell: pwsh

    - name: Commit and push changes to SSHammerhead-docs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Update documentation"
        git push https://${{ secrets.PAT }}@github.com/benpollarduk/SSHammerhead-docs.git HEAD:main

    - name: Tag the commit
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ inputs.ver }}" -m "${{ inputs.ver }} tagged during GitHub action"
        git push --tags
      
    - name: Create GitHub release
      uses: actions/create-release@v1
      with:
        tag_name: "${{ inputs.ver }}"
        release_name: "${{ inputs.ver }}"
        body: "${{ inputs.release-notes }}"
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
